#include <stdio.h>

// Function to find the LFU page (least frequently used page)
int findLFU(int frequency[], int n) 
{
    int i, minimum = frequency[0], pos = 0;

    for (i = 1; i < n; i++) 
    {
        if (frequency[i] < minimum)  // Find the page with the lowest frequency
        {
            minimum = frequency[i];
            pos = i;
        }
    }
    return pos;
}

int main() 
{
    int i, j, n, frames, pages[30], temp[10], frequency[10], flag1, flag2, faults = 0, pos;

    printf("How many pages: ");
    scanf("%d", &n);

    printf("Enter Reference String: ");
    for (i = 0; i < n; i++) 
    {
        scanf("%d", &pages[i]);
    }

    printf("How many frames: ");
    scanf("%d", &frames);

    // Initialize all frames to -1 (indicating empty) and frequency to 0
    for (i = 0; i < frames; i++) 
    {
        temp[i] = -1;
        frequency[i] = 0;  // Track how frequently each frame is used
    }

    for (i = 0; i < n; i++) 
    {
        flag1 = flag2 = 0;

        // Check if the page is already in any of the frames
        for (j = 0; j < frames; j++) 
        {
            if (temp[j] == pages[i]) 
            {
                frequency[j]++;  // Increase the frequency of the accessed page
                flag1 = flag2 = 1;  // Page hit, no page fault
                break;
            }
        }

        // If the page is not in any frame
        if (flag1 == 0) 
        {
            // Look for an empty frame
            for (j = 0; j < frames; j++) 
            {
                if (temp[j] == -1) 
                {
                    faults++;           // Page fault occurs
                    temp[j] = pages[i];  // Insert the new page
                    frequency[j] = 1;    // Set frequency to 1 (since it's newly added)
                    flag2 = 1;
                    break;
                }
            }
        }

        // If no empty frame, apply LFU replacement strategy
        if (flag2 == 0) 
        {
            pos = findLFU(frequency, frames); // Find the least frequently used page
            faults++;               // Page fault occurs
            temp[pos] = pages[i];    // Replace the LFU page with the new page
            frequency[pos] = 1;      // Reset frequency for the new page
        }

        // Display the current status of frames
        printf("\n%2d\t\t\t", pages[i]);
        for (j = 0; j < frames; j++) 
        {
            if (temp[j] != -1)
                printf("%2d ", temp[j]);
            else
                printf("- ");
        }
    }

    printf("\n\nTotal Page Faults: %d\n", faults);
    return 0;
}