#include <stdio.h>

// Function to find the MRU page (most recently used page)
int findMRU(int time[], int n) 
{
    int i, maximum = time[0], pos = 0;

    for (i = 1; i < n; i++) 
    {
        if (time[i] > maximum)  // Find the page with the largest time (most recently used)
        {
            maximum = time[i];
            pos = i;
        }
    }
    return pos;
}

int main() 
{
    int i, j, n, frames, pages[30], temp[10], time[10], flag1, flag2, faults = 0, counter = 0, pos;

    printf("How many pages: ");
    scanf("%d", &n);

    printf("Enter Reference String: ");
    for (i = 0; i < n; i++) 
    {
        scanf("%d", &pages[i]);
    }

    printf("How many frames: ");
    scanf("%d", &frames);

    // Initialize all frames to -1 (indicating empty)
    for (i = 0; i < frames; i++) 
    {
        temp[i] = -1;
    }

    for (i = 0; i < n; i++) 
    {
        flag1 = flag2 = 0;

        // Check if the page is already in any of the frames
        for (j = 0; j < frames; j++) 
        {
            if (temp[j] == pages[i]) 
            {
                counter++;
                time[j] = counter;  // Update the time of the accessed page
                flag1 = flag2 = 1;  // Page hit, no page fault
                break;
            }
        }

        // If the page is not in any frame
        if (flag1 == 0) 
        {
            // Look for an empty frame
            for (j = 0; j < frames; j++) 
            {
                if (temp[j] == -1) 
                {
                    counter++;
                    faults++;          // Page fault occurs
                    temp[j] = pages[i]; // Insert the new page
                    time[j] = counter;  // Update time
                    flag2 = 1;
                    break;
                }
            }
        }

        // If no empty frame, apply MRU replacement strategy
        if (flag2 == 0) 
        {
            pos = findMRU(time, frames); // Find the most recently used page
            counter++;
            faults++;           // Page fault occurs
            temp[pos] = pages[i]; // Replace the MRU page with the new page
            time[pos] = counter;  // Update time
        }

        // Display the current status of frames
        printf("\n%2d\t\t\t", pages[i]);
        for (j = 0; j < frames; j++) 
        {
            if (temp[j] != -1)
                printf("%2d ", temp[j]);
            else
                printf("- ");
        }
    }

    printf("\n\nTotal Page Faults: %d\n", faults);
    return 0;
}