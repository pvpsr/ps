Q.1 Write the simulation program for demand paging and show the page scheduling and total number of page faults according the FIFO page  
    replacement algorithm. Assume the memory of n frames.Reference String : 2, 4, 5, 6, 9, 4, 7, 3, 4, 5, 6, 7, 2, 4, 7, 1


#include <stdio.h>
int main() 
{
    int n,i,j,frames[10], pages[50], page_faults = 0,page_hit=0, index = 0;
    int page_count;
    printf("Enter the number of frames: ");
    scanf("%d",&n);
	printf("Enter the number of pages in the reference string: ");
    scanf("%d", &page_count);
    printf("Enter the reference string: ");
    for(i=0;i<page_count;i++) 
	{
        scanf("%d", &pages[i]);
    }

    for (i=0;i<n;i++) 
	{
        frames[i] = -1;
    }

    for (i=0;i<page_count;i++) 
	{
        int page=pages[i];
        int found=0;
        for (j=0;j<n;j++) 
		{
            if (frames[j]==page) 
			{
                found=1;
				page_hit++;
                break;
            }
        }
        if (!found) 
		{
            frames[index]=page;
            index=(index+1)%n;
            page_faults++;
            printf("Page %d loaded into frame. Current frames: ", page);
            for(j=0;j<n;j++) 
			{
                if (frames[j]!=-1) 
				{
                    printf("%d ",frames[j]);
                } 
				else 
				{
                    printf("- ");
                }
            }
            printf("\n");
        }
    }
    printf("\nTotal page faults: %d\n",page_faults);
	printf("Total page hit: %d\n",page_hit);
}



Q.2 Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given     
    command by creating the child process. Additionally it should interpret the following ‘list’ commands as   
    myshell$ list  f dirname :- To print names of all the files in current directory. 
    myshell$ list  i dirname :- To print names and inodes of the files in the current directory. 



#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>

void make_toks(char *s, char *tok[])
{
  int i=0;
  char *p;
  p = strtok(s," ");
  while(p!=NULL)
  { 
    tok[i++]=p;
    p=strtok(NULL," ");
  }
  tok[i]=NULL;
}

void list(char *dn, char op)
{
  DIR *dp;
  struct dirent *entry;
  int dc=0,fc=0;
  dp = opendir(dn);
  if(dp==NULL)
  {
      printf("Dir %s not found.\n",dn);
  }
  switch(op)
  {
      case 'f': while(entry=readdir(dp))
                {
                  if(entry->d_type==DT_REG)
                    printf("%s\n",entry->d_name);
                } 
                break;
      case 'i': while(entry=readdir(dp))
                {
                  if(entry->d_type==DT_REG)
                    printf("%s\t %lu \n",entry->d_name,entry->d_fileno);
                }
                break;
  }
  closedir(dp);
}

int main() 
{
    char buff[80],*args[10];
    int pid;
    while(1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff,80,stdin);
        buff[strlen(buff)-1]='\0';
        make_toks(buff,args);
        if(strcmp(args[0],"list")==0)
            list(args[2],args[1][0]);
        else
        {
            pid = fork();
            if(pid>0)
              wait();
            else
            {
              if(execvp(args[0],args)==-1)
                printf("Bad command.\n");
            }
        }
    }
}