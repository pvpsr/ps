Q.1 Write a C  program to implement the toy shell. It should display the command prompt “myshell$”. Tokenize the command line and execute 
    the given command by creating the child process. Additionally it should interpret the following commands.  
    count c  filename :- To print number of characters in the file. 
    count w  filename :- To print number of words in the file. 


#include<stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
   int i=0;
   char *p;
   p = strtok(s," ");
   while(p!=NULL)
   {
      tok[i++]=p;
      p=strtok(NULL," ");
   }
   tok[i]=NULL;
}


void count(char *fn, char op)
{
   int fh,cc=0,wc=0;
   char c;
   fh = open(fn,O_RDONLY);
   if(fh==-1)
   {
      printf("File %s not found.\n",fn);
   }
   while(read(fh,&c,1)>0)
   {
      if(c==' ') 
        wc++;
      else if(c=='\n')
      {
         wc++;
      }
      cc++;
   }
   close(fh);

   switch(op)
   {
     case 'c':printf("No.of characters:%d\n",cc);
              break;
     case 'w':printf("No.of words:%d\n",wc);
              break;
   }
}

int main()
{
   char buff[80],*args[10];
   int pid;
   while(1)
   {
      printf("myshell$");
      fflush(stdin);
      fgets(buff,80,stdin);
      buff[strlen(buff)-1]='\0';
      make_toks(buff,args);
      if(strcmp(args[0],"count")==0)
          count(args[2],args[1][0]);
      else
      {
         pid = fork();
         if(pid>0)
            wait();
         else
         {
          if(execvp(args[0],args)==-1)
            printf("Bad command.\n");
         }
      }
   }
}





Q.2 Write the program to simulate Non preemptive priority scheduling. The arrival time and first CPU-burst of different jobs should be input 
    to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process.Also find the average waiting time and turnaround time.


#include <stdio.h>

void main() {
    int p[10], at[10], bt[10], pr[10], st[10], ft[10], wt[10], tt[10];
    int i, j, n, temp;
    float awt = 0, att = 0;

    printf("How many processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nProcess %d:\n", i + 1);
        p[i] = i + 1;
        printf("Enter Arrival Time: ");
        scanf("%d", &at[i]);
        printf("Enter Burst Time: ");
        scanf("%d", &bt[i]);
        printf("Enter Priority (lower value indicates higher priority): ");
        scanf("%d", &pr[i]);
    }

    // Sorting based on Arrival Time and Priority
    for (i = 0; i < n; i++)
        for (j = 0; j < n - 1; j++) {
            if (at[j] > at[j + 1] || (at[j] == at[j + 1] && pr[j] > pr[j + 1])) {
                // Swap Process IDs
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;

                // Swap Arrival Times
                temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                // Swap Burst Times
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                // Swap Priorities
                temp = pr[j];
                pr[j] = pr[j + 1];
                pr[j + 1] = temp;
            }
        }

    printf("\nGantt Chart:\n");
    for (i = 0; i < n; i++)
        printf("P%d |", p[i]);
    printf("\n");

    // Calculate Start and Finish Times
    st[0] = at[0];
    ft[0] = st[0] + bt[0];
    for (i = 1; i < n; i++) {
        // Ensure the start time does not go backward
        st[i] = (ft[i - 1] < at[i]) ? at[i] : ft[i - 1];
        ft[i] = st[i] + bt[i];
    }

    // Calculate Waiting Time and Turnaround Time
    for (i = 0; i < n; i++) {
        wt[i] = st[i] - at[i];
        tt[i] = wt[i] + bt[i];
    }

    // Calculate average waiting time and turnaround time
    for (i = 0; i < n; i++) {
        awt += wt[i];
        att += tt[i];
    }
    awt /= n;
    att /= n;

    printf("\nProcess\tAT\tBT\tPriority\tST\tFT\tWT\tTT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], pr[i], st[i], ft[i], wt[i], tt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", att);
}
