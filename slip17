Q.1 Write the simulation program for demand paging and show the page scheduling and total number of page faults according the Optimal page  
    replacement algorithm. Assume the memory of n frames.Reference String :   7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6,


#include<stdio.h>
int main() {
    int seq[50], fr[5], future[5], n, f, i, j, k, pos, pf = 0;

    // Input the number of pages in the reference string
    printf("Enter number of pages: ");
    scanf("%d", &n);

    // Input the reference string
    printf("Enter the reference string: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &seq[i]);
    }

    // Input the number of frames
    printf("Enter number of frames: ");
    scanf("%d", &f);

    // Initialize frames to -1 (empty)
    for(i = 0; i < f; i++) {
        fr[i] = -1;
    }

    // Loop through each page in the reference string
    for(i = 0; i < n; i++) {
        int found = 0;  // Flag to check if page is already in a frame

        // Check if the page is already in one of the frames
        for(j = 0; j < f; j++) {
            if(fr[j] == seq[i]) {
                found = 1;
                break;
            }
        }

        // If the page is not found in the frames (page fault)
        if(!found) {
            pf++;  // Increment page fault count

            // If there is an empty frame, use it
            for(j = 0; j < f; j++) {
                if(fr[j] == -1) {
                    fr[j] = seq[i];
                    found = 1;
                    break;
                }
            }

            // If no empty frame, replace the page that is used farthest in the future
            if(!found) {
                // Calculate how far in the future each frame's page is used
                for(j = 0; j < f; j++) {
                    future[j] = -1;  // If the page is not used in the future, set to -1
                    for(k = i + 1; k < n; k++) {
                        if(fr[j] == seq[k]) {
                            future[j] = k;
                            break;
                        }
                    }
                }

                // Find the page that is used farthest in the future (or not at all)
                pos = 0;
                for(j = 1; j < f; j++) {
                    if(future[j] == -1 || future[j] > future[pos]) {
                        pos = j;
                    }
                }

                // Replace the page in the frame
                fr[pos] = seq[i];
            }

            // Print the current state of frames
            for(k = 0; k < f; k++) {
                printf("%d\t", fr[k]);
            }
            printf("\n");
        }
    }

    // Output total number of page faults
    printf("\nThe number of page faults is %d\n", pf);

    return 0;
}





Q.2 Write the program to simulate FCFS CPU-scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. 
    Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. 
    Also find the average waiting time and turnaround time.

#include <stdio.h>
void main()
{
	int p[10],at[10],bt[10],st[10],ft[10],wt[10],tt[10],i,j,n,temp,bsum=0;
	float awt=0,att=0;
	printf("How many process:");
	scanf("%d",&n);
	
	for(i=0;i<n;i++)
	{
		printf("\nProcess %d :",i+1);
		p[i]=i+1;
		printf("\nEnter Arrival Time:");
		scanf("%d",&at[i]);
		printf("\nEnter Burst Time:");
		scanf("%d",&bt[i]);
	}
	
	for(i=0;i<n;i++)                    
		for(j=0;j<(n-1);j++)
		{
			if(at[j]>at[j+1])
			{
				temp=p[j];
				p[j]=p[j+1];
				p[j+1]=temp;
				
				temp=at[j];
				at[j]=at[j+1];
				at[j+1]=temp;
				
				temp=bt[j];
				bt[j]=bt[j+1];
				bt[j+1]=temp;
			}
		}
	
	printf("Gantt Chart is:\n");
	for(i=0;i<n;i++)
		printf("P%d|",p[i]);
	printf("\n");
	
	st[0]=at[0];
	ft[0]=st[0]+bt[0];
	for(i=1;i<n;i++)
	{
		st[i]=st[i-1]+bt[i-1];
		ft[i]=st[i]+bt[i];
	}
	
	for(i=0;i<n;i++)
	{
		wt[i]=st[i]-at[i];
		tt[i]=wt[i]+bt[i];
	}

	for(i=0;i<n;i++)
	{
		awt=awt+wt[i];
		att=att+tt[i];
	}
	awt=awt/n;
	att=att/n;
	
	printf("\nProcess\tAT\tBT\tST\tFT\tWT\tTT\n");
	for(i=0;i<n;i++)
	{
		printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n",p[i],at[i],bt[i],st[i],ft[i],wt[i],tt[i]);
	}

	printf("\nAverage Waiting Time:%.2f",awt);
	printf("\nAverage Turnaround Time:%.2f",att);
}