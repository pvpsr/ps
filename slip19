Q.1 Write a C program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given     
    command by creating the child process. Additionally it should interpret the following ‘list’ commands as   
    myshell$ list f dirname:- To print names of all the files in current directory. 


#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>

void make_toks(char *s, char *tok[])
{
  int i=0;
  char *p;
  p = strtok(s," ");
  while(p!=NULL)
  { 
    tok[i++]=p;
    p=strtok(NULL," ");
  }
  tok[i]=NULL;
}

void list(char *dn, char op)
{
  DIR *dp;
  struct dirent *entry;
  int dc=0,fc=0;
  dp = opendir(dn);
  if(dp==NULL)
  {
      printf("Dir %s not found.\n",dn);
  }
  switch(op)
  {
      case 'f': while(entry=readdir(dp))
                {
                  if(entry->d_type==DT_REG)
                    printf("%s\n",entry->d_name);
                } 
                break;
  }
  closedir(dp);
}

int main() 
{
    char buff[80],*args[10];
    int pid;
    while(1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff,80,stdin);
        buff[strlen(buff)-1]='\0';
        make_toks(buff,args);
        if(strcmp(args[0],"list")==0)
            list(args[2],args[1][0]);
        else
        {
            pid = fork();
            if(pid>0)
              wait();
            else
            {
              if(execvp(args[0],args)==-1)
                printf("Bad command.\n");
            }
        }
    }
}


Q.2 Write the simulation program for Round Robin scheduling for given time quantum. The arrival time and first CPU-burst of different jobs 
    should be input to the system. Accept no. of Processes, arrival time and burst time.The output should give the Gantt chart, turnaround time and waiting time for each process. Also display the average turnaround time and average waiting time.


#include<stdio.h>
int main() {
    int n;  // Number of processes
    printf("Enter Total Number of Processes: ");
    scanf("%d", &n);

    int wait_time = 0, ta_time = 0;  // Total waiting time, total turnaround time
    int arr_time[n], burst_time[n], temp_burst_time[n];  // Arrays to store arrival and burst times
    int x = n;  // Number of processes remaining to be executed

    // Input details of each process
    for (int i = 0; i < n; i++) {
        printf("Enter Details of Process %d\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arr_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
        temp_burst_time[i] = burst_time[i];  // Copy burst time to temp_burst_time
    }

    int time_slot;  // Time quantum for Round Robin
    printf("Enter Time Slot: ");
    scanf("%d", &time_slot);

    int total = 0, counter = 0, i = 0;  // Total time, process counter
    printf("PID\tB.T\tT.A.T\tW.T\n");  // Printing header

    while (x != 0) {  // Loop until all processes are finished
        if (temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0) {
            // Process can complete within the time slot
            total += temp_burst_time[i];
            temp_burst_time[i] = 0;  // Process finishes
            counter = 1;
        } else if (temp_burst_time[i] > 0) {
            // Process cannot complete in this time slot, reduce burst time
            temp_burst_time[i] -= time_slot;
            total += time_slot;
        }

        // When a process finishes (temp_burst_time == 0)
        if (temp_burst_time[i] == 0 && counter == 1) {
            x--;  // One less process to complete
            int turnaround_time = total - arr_time[i];  // Completion time - Arrival time
            int waiting_time = turnaround_time - burst_time[i];  // Turnaround time - Burst time

            // Print the details for the current process
            printf("P%d\t%d\t%d\t%d\n", i + 1, burst_time[i], turnaround_time, waiting_time);

            wait_time += waiting_time;
            ta_time += turnaround_time;
            counter = 0;  // Reset counter for the next process
        }

        // Move to the next process in a round-robin fashion
        if (i == n - 1) {
            i = 0;
        } else if (arr_time[i + 1] <= total) {
            i++;
        } else {
            i = 0;
        }
    }

    // Calculate and print average waiting and turnaround times
    float average_wait_time = (float) wait_time / n;
    float average_turnaround_time = (float) ta_time / n;
    printf("\nAverage Waiting Time: %.2f", average_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", average_turnaround_time);

    return 0;
}
