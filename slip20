Q.1 Write a C program to implement the shell which displays the command prompt “myshell$”. It accepts the command, tokenize the command line and  
    execute it by creating the child process. Also implement the additional command ‘typeline’ as  
    typeline -a filename :- To print all  lines in the file.  


#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>

void make_toks(char *s, char *tok[])
{
   int i=0;
   char *p;
   p = strtok(s," ");
   while(p!=NULL)
   {
      tok[i++]=p;
      p=strtok(NULL," ");
   }
   tok[i]=NULL;
}

void typeline(char *fn, char *op)
{
   int fh,i,j,n;
   char c;
   fh = open(fn,O_RDONLY);
   if(fh==-1)
   {
    printf("File %s not found.\n",fn);
   }

   if(strcmp(op,"a")==0)             //For Typeline a
   {
      while(read(fh,&c,1)>0)
          printf("%c",c);
      close(fh);
   }
}

int main()
{
 char buff[80],*args[10];
 int pid;

 while(1)
 {
  printf("myshell$");
  fflush(stdin);
  fgets(buff,80,stdin);
  buff[strlen(buff)-1]='\0';
  make_toks(buff,args);
  if(strcmp(args[0],"typeline")==0)
   typeline(args[2],args[1]);
  else
  {
   pid = fork();
   if(pid>0)
    wait();
   else
   {
    if(execvp(args[0],args)==-1)
     printf("Bad command.\n");
   }
  }
 }
}





Q.2 Write the program to simulate Non-preemptive Shortest Job First (SJF) –scheduling. The arrival time and first CPU-burst of different 
    jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time 


#include <stdio.h>

void main() {
    int p[10], at[10], bt[10], st[10], ft[10], wt[10], tt[10], i, j, n, total_wt = 0, total_tt = 0;
    float awt = 0, att = 0;

    printf("How many processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        p[i] = i + 1;  // Process ID
        printf("Enter Arrival Time for Process %d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter Burst Time for Process %d: ", i + 1);
        scanf("%d", &bt[i]);
    }

    // Sorting processes based on arrival time
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (at[i] > at[j]) {
                // Swap processes
                int temp = p[i];
                p[i] = p[j];
                p[j] = temp;

                temp = at[i];
                at[i] = at[j];
                at[j] = temp;

                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }

    // Calculating start time, finish time, waiting time, and turnaround time
    st[0] = at[0];  // Start time of the first process
    for (i = 0; i < n; i++) {
        if (i > 0) {
            st[i] = ft[i - 1];  // Start time of subsequent processes
        }
        ft[i] = st[i] + bt[i];  // Finish time
        wt[i] = st[i] - at[i];  // Waiting time
        tt[i] = wt[i] + bt[i];  // Turnaround time

        total_wt += wt[i];
        total_tt += tt[i];
    }

    awt = (float)total_wt / n;  // Average waiting time
    att = (float)total_tt / n;  // Average turnaround time

    printf("\nProcess\tAT\tBT\tST\tFT\tWT\tTT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], st[i], ft[i], wt[i], tt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", att);
}
