Q.1 Write a C program that demonstrates the use of nice() system call. After a child Process is started using fork (), assign higher 
    priority to the child using nice () system call. 
  
#include<stdio.h>
void main()
{
    int pid, retnice;
    printf("Press ctrl+c to Stop Process\n");
    pid=fork();
    for(;;)
    {
        if(pid== 0)
        {
            retnice = nice (-4);
            printf("Child gets higher CPU priority  %d \n",retnice);
            sleep(1);
        }
        else
        {
            retnice=nice(5);
            printf("Parent gets lower CPU priority  %d \n",retnice);
            sleep(1);
        }
     }
 }



Q.2 Write a  C  program to simulate Non preemptive priority scheduling. The arrival time and first CPU-burst of different jobs should be input 
    to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time 
    for each process. Also find the average waiting time and turnaround time.


#include <stdio.h>
void main() {
    int p[10], at[10], bt[10], pr[10], st[10], ft[10], wt[10], tt[10];
    int i, j, n, temp;
    float awt = 0, att = 0;

    printf("How many processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nProcess %d:\n", i + 1);
        p[i] = i + 1;
        printf("Enter Arrival Time: ");
        scanf("%d", &at[i]);
        printf("Enter Burst Time: ");
        scanf("%d", &bt[i]);
        printf("Enter Priority (lower value indicates higher priority): ");
        scanf("%d", &pr[i]);
    }

    // Sorting based on Arrival Time and Priority
    for (i = 0; i < n; i++)
        for (j = 0; j < n - 1; j++) {
            if (at[j] > at[j + 1] || (at[j] == at[j + 1] && pr[j] > pr[j + 1])) {
                // Swap Process IDs
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;

                // Swap Arrival Times
                temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                // Swap Burst Times
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                // Swap Priorities
                temp = pr[j];
                pr[j] = pr[j + 1];
                pr[j + 1] = temp;
            }
        }

    printf("\nGantt Chart:\n");
    for (i = 0; i < n; i++)
        printf("P%d |", p[i]);
    printf("\n");

    // Calculate Start and Finish Times
    st[0] = at[0];
    ft[0] = st[0] + bt[0];
    for (i = 1; i < n; i++) {
        // Ensure the start time does not go backward
        st[i] = (ft[i - 1] < at[i]) ? at[i] : ft[i - 1];
        ft[i] = st[i] + bt[i];
    }

    // Calculate Waiting Time and Turnaround Time
    for (i = 0; i < n; i++) {
        wt[i] = st[i] - at[i];
        tt[i] = wt[i] + bt[i];
    }

    // Calculate average waiting time and turnaround time
    for (i = 0; i < n; i++) {
        awt += wt[i];
        att += tt[i];
    }
    awt /= n;
    att /= n;

    printf("\nProcess\tAT\tBT\tPriority\tST\tFT\tWT\tTT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], pr[i], st[i], ft[i], wt[i], tt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", att);
}
