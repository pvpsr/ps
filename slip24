Q.1 Write a C program to accept n integers to be sorted. Main function creates child process using fork system call. Parent process sorts 
    the integers using bubble sort and waits for child process using wait system call. Child zdesxaqprocess sorts the integers using insertion sort.


#include <stdio.h>
#include <sys/types.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

void bubblesort(int[],int);
void insertionsort(int[],int);

int main()
{
  int i,n,a[20];
  printf("How many values: ");
  scanf("%d",&n);
  printf("\nEnter actual values: ");
  for(i=0; i<n; i++)
    scanf("%d",&a[i]);
  
  pid_t pid;
  pid=fork();
  
  if(pid==0)
  {
    printf("I am Child Process. My ID is %d\n",getpid());
    insertionsort(a,n);
    printf("\nThe sorted array using Insertion sort in Child process is :\n");
    for(i=0; i<n; i++)
      printf("\t%d",a[i]);
    printf("\n");
  }
  else
  {
    printf("I am Parent Process. My ID is %d\n",getppid());
    bubblesort(a,n);
    printf("\nThe sorted array using Bubble sort in Parent process is :\n");
    for(i=0; i<n; i++)
      printf("\t%d",a[i]);
    printf("\n");
    wait();
  }
  return 0;
}

void bubblesort(int x[], int n)
{
  int i, pass, temp;
  for(pass=1; pass<n; pass++)
  {
    for(i=0; i<n-1; i++)
    {
      if(x[i]>x[i+1])
      {
        temp=x[i];
        x[i]=x[i+1];
        x[i+1]=temp;
      }
    }
  }
}

void insertionsort(int x[], int n)
{
  int i, k, key=0;
  for(k=1; k<n; k++)
  {
    key=x[k];
    for(i=k-1; x[i]>key && i>=0; i--)
    {
      x[i+1]=x[i];
    }
    x[i+1]=key;
  }
}





Q.2  Write a C  program to implement the toy shell. It should display the command prompt “myshell$”. Tokenize the command line and execute 
     the given command by creating the child process. Additionally it should interpret the following commands.  
     count c  filename :- To print number of characters in the file. 
     count w  filename :- To print number of words in the file. 
     count l  filename :- To print number of lines in the file.


#include<stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
   int i=0;
   char *p;
   p = strtok(s," ");
   while(p!=NULL)
   {
      tok[i++]=p;
      p=strtok(NULL," ");
   }
   tok[i]=NULL;
}


void count(char *fn, char op)
{
   int fh,cc=0,wc=0,lc=0;
   char c;
   fh = open(fn,O_RDONLY);
   if(fh==-1)
   {
      printf("File %s not found.\n",fn);
   }
   while(read(fh,&c,1)>0)
   {
      if(c==' ') 
        wc++;
      else if(c=='\n')
      {
         wc++;
         lc++;
      }
      cc++;
   }
   close(fh);

   switch(op)
   {
     case 'c':printf("No.of characters:%d\n",cc);
              break;
     case 'w':printf("No.of words:%d\n",wc);
              break;
     case 'l':printf("No.of lines:%d\n",lc);
              break;
   }
}

int main()
{
   char buff[80],*args[10];
   int pid;
   while(1)
   {
      printf("myshell$");
      fflush(stdin);
      fgets(buff,80,stdin);
      buff[strlen(buff)-1]='\0';
      make_toks(buff,args);
      if(strcmp(args[0],"count")==0)
          count(args[2],args[1][0]);
      else
      {
         pid = fork();
         if(pid>0)
            wait();
         else
         {
          if(execvp(args[0],args)==-1)
            printf("Bad command.\n");
         }
      }
   }
}


