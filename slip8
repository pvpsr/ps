Q.1 Write the simulation program for demand paging and show the page scheduling and total number of page faults according the LRU page  
    replacement algorithm. Assume the memory of n frames.Reference String :   8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2


#include<stdio.h>
int main() {
    int seq[50], fr[5], used[5], n, f, i, j, k, pos, pf = 0;

    // Input the number of pages in the reference string
    printf("Enter number of pages: ");
    scanf("%d", &n);

    // Input the reference string
    printf("Enter the reference string: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &seq[i]);
    }

    // Input the number of frames
    printf("Enter number of frames: ");
    scanf("%d", &f);

    // Initialize frames and used times to -1 (empty)
    for(i = 0; i < f; i++) {
        fr[i] = -1;
        used[i] = -1;
    }

    // Loop through each page in the reference string
    for(i = 0; i < n; i++) {
        int found = 0;  // Flag to check if page is already in a frame

        // Check if page is already in one of the frames
        for(j = 0; j < f; j++) {
            if(fr[j] == seq[i]) {
                found = 1;
                used[j] = i;  // Update the last used time
                break;
            }
        }

        // If page is not found in frames (page fault)
        if(!found) {
            pf++;  // Increment page fault count

            // If there's an empty frame, use it
            for(j = 0; j < f; j++) {
                if(fr[j] == -1) {
                    fr[j] = seq[i];
                    used[j] = i;  // Update last used time
                    found = 1;
                    break;
                }
            }

            // If no empty frame, replace the least recently used page
            if(!found) {
                pos = 0;  // Position of least recently used page
                for(j = 1; j < f; j++) {
                    if(used[j] < used[pos]) {
                        pos = j;
                    }
                }

                // Replace the least recently used page
                fr[pos] = seq[i];
                used[pos] = i;  // Update last used time
            }

            // Print the current state of frames
            for(k = 0; k < f; k++) {
                printf("%d\t", fr[k]);
            }
            printf("\n");
        }
    }

    // Output total number of page faults
    printf("\nThe number of page faults is %d\n", pf);

    return 0;
}





Q.2 Write a program to implement the shell. It should display the command prompt  “myshell$”. Tokenize the command line and execute the given  
    command by creating the child process. Additionally it should interpret the following  commands.  
    myshell$ search f filename pattern :- To display first occurrence of pattern in the file. 
    myshell$ search c filename pattern :- To count the number of occurrence of pattern in the file.
    

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
   int i=0;
   char *p;
   p = strtok(s," ");
   while(p!=NULL)
   {
      tok[i++]=p;
      p=strtok(NULL," ");
   }
   tok[i]=NULL;
}

void search(char *fn, char op, char *pattern)
{
   int fh,count=0,i=0,j=0;
   char buff[255],c,*p;
   fh = open(fn,O_RDONLY);
   if(fh==-1)
   {
      printf("File %s Not Found\n",fn);
      return;
   }
   
   switch(op)
   {
   case 'f':while(read(fh,&c,1))
            {
               buff[j++]=c;
               if(c=='\n')
               {
                  buff[j]='\0';
                  j=0;
                  i++;
                  if(strstr(buff,pattern))
                  {
                     printf("%d: %s",i,buff);
                     break;
                  }
               }
            }
            break;
   case 'c':while(read(fh,&c,1))
            {
               buff[j++]=c;
               if(c=='\n')
               {
                  buff[j]='\0';
                  j=0;
                  p = buff;
                  while(p=strstr(p,pattern))
                  {
                     count++;
                     p++;
                  }
               }
            }
            printf("Total No.of Occurrences = %d\n",count);
            break;
   }
   close(fh);
}

int main()
{
 char buff[80],*args[10];
 int pid;
 while(1)
 {
    printf("myshell$");
    fflush(stdin);
    fgets(buff,80,stdin);
    buff[strlen(buff)-1]='\0';
    make_toks(buff,args);
    if(strcmp(args[0],"search")==0)
      search(args[3],args[1][0],args[2]);
    else
    {
       pid = fork();
       if(pid>0)
          wait();
       else
       {
          if(execvp(args[0],args)==-1)
            printf("Bad command.\n");
       }
    }
  }
}