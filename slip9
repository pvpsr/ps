Q.1 Write the simulation program for demand paging and show the page scheduling and total number of page faults according the FIFO page  
    replacement algorithm. Assume the memory of n frames. Reference String : 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2



#include <stdio.h>
int main() 
{
    int n,i,j,frames[10], pages[50], page_faults = 0,page_hit=0, index = 0;
    int page_count;
    printf("Enter the number of frames: ");
    scanf("%d",&n);
	printf("Enter the number of pages in the reference string: ");
    scanf("%d", &page_count);
    printf("Enter the reference string: ");
    for(i=0;i<page_count;i++) 
	{
        scanf("%d", &pages[i]);
    }

    for (i=0;i<n;i++) 
	{
        frames[i] = -1;
    }
    for (i=0;i<page_count;i++) 
	{
        int page=pages[i];
        int found=0;
        for (j=0;j<n;j++) 
		{
            if (frames[j]==page) 
			{
                found=1;
				page_hit++;
                break;
            }
        }

        if (!found) 
		{
            frames[index]=page;
            index=(index+1)%n;
            page_faults++;
            printf("Page %d loaded into frame. Current frames: ", page);
            for(j=0;j<n;j++) 
			{
                if (frames[j]!=-1) 
				{
                    printf("%d ",frames[j]);
                } 
				else 
				{
                    printf("- ");
                }
            }
            printf("\n");
        }
    }
    printf("\nTotal page faults: %d\n",page_faults);
    printf("Total page hit: %d\n",page_hit);

}






Q.2 Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given  
       command by  creating the child process. Additionally it should interpret  the  following commands.  
       myshell$ search f filename pattern:- To display first occurrence of pattern in the file. 
       myshell$ search a filename pattern  :- To search all the  occurrence of pattern in the file.

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
   int i=0;
   char *p;
   p = strtok(s," ");
   while(p!=NULL)
   {
      tok[i++]=p;
      p=strtok(NULL," ");
   }
   tok[i]=NULL;
}

void search(char *fn, char op, char *pattern)
{
   int fh,count=0,i=0,j=0;
   char buff[255],c,*p;
   fh = open(fn,O_RDONLY);
   if(fh==-1)
   {
      printf("File %s Not Found\n",fn);
      return;
   }
   
   switch(op)
   {
       case 'f':while(read(fh,&c,1))
                {
                   buff[j++]=c;
                   if(c=='\n')
                   {
                      buff[j]='\0';
                      j=0;
                      i++;
                      if(strstr(buff,pattern))
                      {
                         printf("%d: %s",i,buff);
                         break;
                      }
                   }
                }
                break;
       case 'a':while(read(fh,&c,1))
                {
                 buff[j++]=c;
                 if(c=='\n')
                 {
                  buff[j]='\0';
                  j = 0;
                  i++;
                  if(strstr(buff,pattern))
                   printf("%d: %s",i,buff);
                 }
                }
                break;
   }
   close(fh);
}

int main()
{
 char buff[80],*args[10];
 int pid;
 while(1)
 {
    printf("myshell$");
    fflush(stdin);
    fgets(buff,80,stdin);
    buff[strlen(buff)-1]='\0';
    make_toks(buff,args);
    if(strcmp(args[0],"search")==0)
      search(args[3],args[1][0],args[2]);
    else
    {
       pid = fork();
       if(pid>0)
          wait();
       else
       {
          if(execvp(args[0],args)==-1)
            printf("Bad command.\n");
       }
    }
  }
}
